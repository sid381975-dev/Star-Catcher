<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Star Catcher ‚Äî Web Game</title>
<style>
  :root{
    --bg:#0b1020;
    --accent:#ffd54a;
    --muted:#cbd5e1;
  }
  html,body{height:100%;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;}
  body{
    display:flex;
    align-items:center;
    justify-content:center;
    background: radial-gradient(circle at 10% 10%, #071028 0%, var(--bg) 50%);
    color:var(--muted);
    -webkit-font-smoothing:antialiased;
    -moz-osx-font-smoothing:grayscale;
  }
  .container{
    width:min(900px,96vw);
    background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
    border:1px solid rgba(255,255,255,0.04);
    border-radius:12px;
    padding:12px;
    box-shadow: 0 8px 30px rgba(2,6,23,0.6);
  }
  header{
    display:flex;
    align-items:center;
    justify-content:space-between;
    gap:12px;
    margin-bottom:8px;
  }
  h1{font-size:18px;margin:0;color:var(--accent)}
  .controls{
    display:flex;
    gap:8px;
    align-items:center;
  }
  button{
    background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted);
    padding:6px 10px;border-radius:8px;font-size:13px;cursor:pointer;
  }
  button.primary{
    background:linear-gradient(90deg,#2b6cb0,#805ad5);
    color:white;border:none;
  }
  #gameWrap{
    position:relative;
    aspect-ratio:16/9;
    width:100%;
    background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0));
    overflow:hidden;
    border-radius:8px;
    touch-action:none;
  }
  canvas{display:block;width:100%;height:100%;}
  .hud{
    position:absolute;left:10px;top:10px;color:var(--muted);
    font-size:13px;text-shadow:0 1px 0 rgba(0,0,0,0.6);
  }
  .hud .score{color:var(--accent);font-weight:700}
  .overlay{
    position:absolute;inset:0;display:flex;align-items:center;justify-content:center;
    pointer-events:none;
  }
  .panel{
    pointer-events:auto;
    background:rgba(2,6,23,0.7);backdrop-filter:blur(6px);
    padding:18px;border-radius:12px;border:1px solid rgba(255,255,255,0.04);
    text-align:center;color:var(--muted);max-width:520px;
  }
  .small {font-size:13px;color:var(--muted)}
  .muted {opacity:0.8}
  .footer{margin-top:8px;font-size:12px;color:rgba(255,255,255,0.6)}
  .touchControls{
    display:none;
    position:absolute;bottom:12px;left:50%;transform:translateX(-50%);gap:8px;
  }
  .touchControls button{width:64px;height:48px;border-radius:10px;font-weight:700}
  @media (hover:none){
    .touchControls{display:flex}
  }
</style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Star Catcher</h1>
      <div class="controls">
        <div class="small">Use ‚Üê ‚Üí keys or drag</div>
        <button id="muteBtn" title="Mute / Unmute">üîä</button>
        <button id="pauseBtn">Pause</button>
        <button id="restartBtn" class="primary">Restart</button>
      </div>
    </header>

    <div id="gameWrap">
      <canvas id="gameCanvas" width="1280" height="720"></canvas>

      <div class="hud" id="hud">
        Score: <span class="score" id="score">0</span>
        &nbsp;|&nbsp; Level: <span id="level">1</span>
        &nbsp;|&nbsp; High: <span id="high">0</span>
      </div>

      <div class="overlay" id="overlay">
        <div class="panel" id="panel">
          <h2 id="panelTitle">Welcome to Star Catcher</h2>
          <p class="small" id="panelText">Move your ship and catch falling stars. Avoid meteors. Survive and rack up the high score!</p>
          <div style="margin-top:12px">
            <button id="startBtn" class="primary">Start Game</button>
            <button id="howBtn">How to play</button>
          </div>
          <div class="footer muted">Press space to pause. Your high score saves locally.</div>
        </div>
      </div>

      <div class="touchControls" id="touchControls">
        <button id="leftBtn">‚óÄ</button>
        <button id="rightBtn">‚ñ∂</button>
      </div>
    </div>
  </div>

<script>
/* Star Catcher ‚Äî single-file HTML5 canvas game
   Features: responsive, keyboard & touch, localStorage highscore, sound, pause/restart
   Author: generated by assistant
*/

// ---- Utilities ----
const clamp = (v,a,b)=>Math.max(a,Math.min(b,v));
const rand = (a,b)=>a + Math.random()*(b-a);

// ---- Canvas setup ----
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d', { alpha: true });
let W = canvas.width, H = canvas.height;

function resizeCanvas(){
  // maintain internal resolution while CSS scales for crispness
  const rect = canvas.getBoundingClientRect();
  const ratio = window.devicePixelRatio || 1;
  W = Math.max(640, Math.floor(rect.width * ratio));
  H = Math.max(360, Math.floor(rect.height * ratio));
  canvas.width = W; canvas.height = H;
  ctx.imageSmoothingEnabled = true;
}
window.addEventListener('resize', resizeCanvas);
resizeCanvas();

// ---- Game state ----
let state = 'menu'; // 'menu' | 'playing' | 'paused' | 'gameover'
let score = 0, level = 1, high = Number(localStorage.getItem('sc_high')||0);
let lastTime = 0;
let entities = []; // stars, meteors, particles
let ship = null;
let spawnTimer = 0;
let spawnInterval = 900; // ms
let muted = false;
let audioCtx = null;

// ---- Controls ----
const keys = {};
window.addEventListener('keydown', e=>{
  keys[e.key] = true;
  if(e.key === ' '){ togglePause(); e.preventDefault(); }
});
window.addEventListener('keyup', e=> keys[e.key] = false);

// touch / drag
let dragging = false;
let dragX = 0;
canvas.addEventListener('pointerdown', e=>{
  dragging = true;
  dragX = e.clientX;
});
window.addEventListener('pointermove', e=>{
  if(dragging) dragX = e.clientX;
});
window.addEventListener('pointerup', ()=> dragging=false);

// HUD buttons
document.getElementById('startBtn').addEventListener('click', ()=>startGame());
document.getElementById('restartBtn').addEventListener('click', ()=>startGame());
document.getElementById('howBtn').addEventListener('click', ()=>showPanel('How to play','Catch falling stars for points. Avoid meteors. Move with ‚Üê ‚Üí or drag. Press Space to pause.'));
document.getElementById('pauseBtn').addEventListener('click', ()=>togglePause());
document.getElementById('muteBtn').addEventListener('click', ()=>{ muted = !muted; updateMuteUI(); });
document.getElementById('leftBtn').addEventListener('pointerdown', ()=>keys.Left=true); document.getElementById('leftBtn').addEventListener('pointerup', ()=>keys.Left=false);
document.getElementById('rightBtn').addEventListener('pointerdown', ()=>keys.Right=true); document.getElementById('rightBtn').addEventListener('pointerup', ()=>keys.Right=false);

function updateMuteUI(){ document.getElementById('muteBtn').textContent = muted ? 'üîá':'üîä'; }
updateMuteUI();

// ---- Audio (simple) ----
function ensureAudio(){
  if(audioCtx) return;
  try{
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  }catch(e){
    audioCtx = null;
  }
}
function playBeep(freq=440,dur=0.08,vol=0.08,type='sine'){
  if(muted) return;
  ensureAudio();
  if(!audioCtx) return;
  const o = audioCtx.createOscillator();
  const g = audioCtx.createGain();
  o.type = type;
  o.frequency.value = freq;
  g.gain.value = vol;
  o.connect(g); g.connect(audioCtx.destination);
  o.start();
  g.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + dur);
  o.stop(audioCtx.currentTime + dur + 0.02);
}

// ---- Entities ----
function createShip(){
  return {
    x: W/2,
    y: H - 90,
    w: 90,
    h: 22,
    vx: 0,
    speed: 700,
    draw(ctx){
      ctx.save();
      ctx.translate(this.x, this.y);
      // ship body
      ctx.fillStyle = '#dff3ff';
      ctx.beginPath();
      ctx.moveTo(-this.w/2, 0);
      ctx.lineTo(this.w/2, 0);
      ctx.lineTo(0, -this.h-18);
      ctx.closePath();
      ctx.fill();
      // cockpit
      ctx.fillStyle = '#1e90ff';
      ctx.beginPath();
      ctx.ellipse(-14,-6,10,6,0,0,Math.PI*2); ctx.fill();
      ctx.restore();
    }
  };
}

function spawnEntity(type){
  if(type === 'star'){
    entities.push({
      type:'star',
      x: rand(40, W-40),
      y: -20,
      r: rand(8,14),
      vy: rand(130, 240) + level*10,
      rot: rand(0,Math.PI*2),
      draw(ctx){
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rot);
        // 4-point star
        ctx.fillStyle = '#fff6b8';
        ctx.beginPath();
        for(let i=0;i<8;i++){
          const a = i*Math.PI/4;
          const rad = (i%2===0)? this.r : this.r/2;
          ctx.lineTo(Math.cos(a)*rad, Math.sin(a)*rad);
        }
        ctx.closePath(); ctx.fill();
        ctx.restore();
      },
      update(dt){ this.y += this.vy * dt; this.rot += dt; }
    });
  } else if(type==='meteor'){
    const size = rand(18,44);
    entities.push({
      type:'meteor',
      x: rand(30, W-30),
      y: -30,
      r: size,
      vx: rand(-80,80),
      vy: rand(160,300) + level*12,
      rot: rand(0,Math.PI*2),
      draw(ctx){
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.rot);
        ctx.fillStyle = '#7b5a3a';
        ctx.beginPath();
        ctx.ellipse(0,0,this.r,this.r*0.8, 0, 0, Math.PI*2);
        ctx.fill();
        ctx.restore();
      },
      update(dt){ this.x += this.vx*dt; this.y += this.vy*dt; this.rot += dt* (this.vx>0?1:-1); }
    });
  }
}

function spawnBurst(x,y,color,count=12,spread=180){
  for(let i=0;i<count;i++){
    const ang = Math.PI*(Math.random()*2);
    entities.push({
      type:'part',
      x,y,
      vx: Math.cos(ang)*rand(60,260),
      vy: Math.sin(ang)*rand(60,260),
      life: rand(0.4,0.9),
      col: color,
      update(dt){
        this.life -= dt;
        this.x += this.vx*dt; this.y += this.vy*dt;
      },
      draw(ctx){
        if(this.life<=0) return;
        ctx.save();
        ctx.globalAlpha = Math.max(0, this.life);
        ctx.fillStyle = this.col;
        ctx.beginPath(); ctx.arc(this.x,this.y, Math.max(1,4*this.life),0,Math.PI*2); ctx.fill();
        ctx.restore();
      }
    });
  }
}

// ---- Game logic ----
function resetGame(){
  score = 0; level = 1; entities = []; spawnTimer = 0; spawnInterval = 900;
  ship = createShip();
  document.getElementById('score').textContent = score;
  document.getElementById('level').textContent = level;
  document.getElementById('high').textContent = high;
}

function startGame(){
  if(audioCtx && audioCtx.state === 'suspended') audioCtx.resume();
  resetGame();
  state = 'playing';
  hidePanel();
  lastTime = performance.now();
  requestAnimationFrame(loop);
  playBeep(880,0.06,0.08,'square');
}

function gameOver(){
  state = 'gameover';
  if(score > high){ high = score; localStorage.setItem('sc_high', String(high)); }
  showPanel('Game Over', `Score: ${score} ‚Äî High: ${high}`);
  playBeep(120,0.18,0.12,'sawtooth');
}

// small helper for panel display
function showPanel(title,text){
  const p = document.getElementById('panel');
  document.getElementById('panelTitle').textContent = title;
  document.getElementById('panelText').textContent = text;
  document.getElementById('overlay').style.display = 'flex';
}
function hidePanel(){ document.getElementById('overlay').style.display = 'none'; }

function togglePause(){
  if(state === 'playing'){ state = 'paused'; document.getElementById('pauseBtn').textContent = 'Resume'; showPanel('Paused','Game is paused ‚Äî press Resume or Space to continue'); }
  else if(state === 'paused'){ state = 'playing'; document.getElementById('pauseBtn').textContent = 'Pause'; hidePanel(); lastTime = performance.now(); requestAnimationFrame(loop); }
}

// collision simple AABB/circle approximations
function checkCollision(a,b){
  if(a.type === 'star' || a.type === 'meteor'){
    const dx = a.x - b.x;
    const dy = a.y - b.y;
    const r = (a.r || 10) + Math.max(b.w,b.h)/2;
    return dx*dx + dy*dy < r*r;
  }
  return false;
}

// ---- Main loop ----
function loop(ts){
  if(state !== 'playing') return;
  const dt = Math.min(0.05, (ts - lastTime) / 1000);
  lastTime = ts;
  update(dt);
  render();
  requestAnimationFrame(loop);
}

function update(dt){
  // controls
  let move = 0;
  if(keys.ArrowLeft || keys.Left) move -= 1;
  if(keys.ArrowRight || keys.Right) move += 1;
  if(dragging){
    // map dragX from viewport coords to canvas logical coordinates
    const rect = canvas.getBoundingClientRect();
    const ratio = canvas.width / rect.width;
    const tx = (dragX - rect.left) * ratio;
    // target ship x
    const targetX = tx;
    const dx = targetX - ship.x;
    ship.vx = clamp(dx*6, -ship.speed, ship.speed);
  } else {
    ship.vx = move * ship.speed;
  }
  ship.x += ship.vx * dt;
  ship.x = clamp(ship.x, 40, W-40);

  // spawn logic
  spawnTimer += dt*1000;
  // dynamic interval by level
  const base = Math.max(360 - level*12, 160);
  if(spawnTimer > spawnInterval){
    spawnTimer = 0;
    // increase chance of meteors with level
    if(Math.random() < Math.min(0.18 + level*0.02, 0.6)){
      spawnEntity('meteor');
    } else {
      spawnEntity('star');
    }
    // ramp difficulty
    spawnInterval = base - Math.random()*120;
  }

  // update entities
  for(let i=entities.length-1;i>=0;i--){
    const e = entities[i];
    if(e.update) e.update(dt);
    // out of bounds remove
    if(e.y > H + 200 || e.x < -200 || e.x > W+200 || (e.life !== undefined && e.life <= 0)){
      entities.splice(i,1); continue;
    }
    // collisions
    if(e.type === 'star' || e.type === 'meteor'){
      if(checkCollision(e, ship)){
        if(e.type === 'star'){
          score += Math.floor(10 + level*2 + e.r/2);
          spawnBurst(e.x,e.y,'#fff6b8',10);
          playBeep(900 + Math.random()*400, 0.06, 0.06, 'sine');
        } else {
          // hit meteor: lose
          spawnBurst(e.x,e.y,'#c9642b',18);
          playBeep(140,0.24,0.14,'sawtooth');
          gameOver(); return;
        }
        // remove entity
        entities.splice(i,1);
      }
    }
  }

  // level up by score
  const newLevel = Math.floor(score/150) + 1;
  if(newLevel !== level){
    level = newLevel;
    playBeep(1200 - Math.min(700, level*30), 0.07, 0.06, 'triangle');
  }

  // update HUD
  document.getElementById('score').textContent = score;
  document.getElementById('level').textContent = level;
  document.getElementById('high').textContent = high;
}

// ---- Render ----
function render(){
  // clear with starry background
  ctx.clearRect(0,0,W,H);
  // subtle stars background
  const g = ctx.createLinearGradient(0,0,0,H);
  g.addColorStop(0,'#061025'); g.addColorStop(1,'#081426');
  ctx.fillStyle = g; ctx.fillRect(0,0,W,H);

  // parallax background stars (quick deterministic)
  ctx.save();
  ctx.globalAlpha = 0.25;
  for(let i=0;i<80;i++){
    const x = (i*12345 % W);
    const y = ((i*6789) % H);
    ctx.fillStyle = (i%7===0)?'#bfe7ff':'#6fb6ff';
    ctx.fillRect((x + (level*2))%W, (y + (level*3))%H, 1 + (i%3===0?1:0), 1);
  }
  ctx.restore();

  // draw ship
  ship.draw(ctx);

  // draw entities
  for(const e of entities) e.draw(ctx);

  // HUD (overlay small)
  // draw score banner near top
  ctx.save();
  ctx.font = `${Math.round(16 * (W/1280))}px system-ui,Segoe UI,Roboto,Arial`;
  ctx.fillStyle = 'rgba(255,255,255,0.06)';
  ctx.fillRect(10,10,160,36);
  ctx.restore();
}

// initial menu
showPanel('Welcome to Star Catcher','Move your ship to catch stars. Avoid meteors. Click Start to play.');

// ensure first pointer unlock for audio on mobile
canvas.addEventListener('pointerdown', ()=>{ if(!audioCtx) ensureAudio(); }, {once:true});

</script>
</body>
</html>
